[{"/Users/andrew/weather-app/weather-app/src/index.js":"1","/Users/andrew/weather-app/weather-app/src/data/cities.js":"2","/Users/andrew/weather-app/weather-app/src/components/CitySelectorHeaderComponent.jsx":"3","/Users/andrew/weather-app/weather-app/src/components/MainContentCardComponent.jsx":"4","/Users/andrew/weather-app/weather-app/src/util/index.js":"5","/Users/andrew/weather-app/weather-app/src/components/WeatherIndicatorComponent.jsx":"6","/Users/andrew/weather-app/weather-app/src/App.jsx":"7","/Users/andrew/weather-app/weather-app/src/components/WeatherIconComponent.jsx":"8"},{"size":229,"mtime":1608230133494,"results":"9","hashOfConfig":"10"},{"size":244,"mtime":1608236696473,"results":"11","hashOfConfig":"10"},{"size":1363,"mtime":1608230159213,"results":"12","hashOfConfig":"10"},{"size":2686,"mtime":1608241246090,"results":"13","hashOfConfig":"10"},{"size":1919,"mtime":1608240544008,"results":"14","hashOfConfig":"10"},{"size":2267,"mtime":1608246800062,"results":"15","hashOfConfig":"10"},{"size":983,"mtime":1608237267229,"results":"16","hashOfConfig":"10"},{"size":954,"mtime":1608246608722,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"hqwvnf",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/andrew/weather-app/weather-app/src/index.js",[],["38","39"],"/Users/andrew/weather-app/weather-app/src/data/cities.js",["40"],"export default [\n  {\n    friendlyName: 'Moscow',\n    cityName: 'moscow'\n  },\n  {\n    friendlyName: 'Halifax',\n    cityName: 'halifax',\n    stateCode: 'NS',\n    countryCode: 'CA'\n  },\n  {\n    friendlyName: 'London',\n    cityName: 'london'\n  }\n]\n","/Users/andrew/weather-app/weather-app/src/components/CitySelectorHeaderComponent.jsx",["41"],"import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class CitySelectorHeaderComponent extends React.Component {\n  static propTypes = {\n    cities: PropTypes.arrayOf(PropTypes.shape({\n      friendlyName: PropTypes.string.isRequired,\n      cityName: PropTypes.string.isRequired,\n      stateCode: PropTypes.string,\n      countryCode: PropTypes.string\n    })).isRequired,\n    selectedCityIndex: PropTypes.number.isRequired,\n    onSelectedCityChange: PropTypes.func.isRequired\n  }\n\n  get _selectedCity() {\n    if (this.props.selectedCityIndex === -1) {\n      return null\n    }\n\n    return this.props.cities[this.props.selectedCityIndex]\n  }\n\n  _onCityOptionClick = (index) => {\n    this.props.onSelectedCityChange(this._selectedCity, index)\n  }\n\n  _renderCityOption(city, index) {\n    const isActive = index === this.props.selectedCityIndex\n\n    let className = 'c-city-selector-header__option'\n\n    if (isActive) {\n      className += ' c-city-selector-header__option--active'\n    }\n\n    return (\n      <div key={index}>\n        <a href='#' className={className} onClick={() => this._onCityOptionClick(index)}>\n          {city.friendlyName}\n        </a>\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div className='c-city-selector-header'>\n        {this.props.cities.map(this._renderCityOption.bind(this))}\n      </div>\n    )\n  }\n}\n","/Users/andrew/weather-app/weather-app/src/components/MainContentCardComponent.jsx",[],"/Users/andrew/weather-app/weather-app/src/util/index.js",["42"],"export function formApiRequestUrl(city, current = true) {\n  let baseUrl = `https://api.openweathermap.org/data/2.5/weather`,\n      components = []\n\n  const cityComponents = [\n    'cityName',\n    'stateCode',\n    'countryCode'\n  ]\n\n  for (let key of cityComponents) {\n    if (!(key in city) || !city[key]) {\n      break\n    }\n\n    components.push(city[key])\n  }\n\n  if (!current) {\n    baseUrl = `https://api.openweathermap.org/data/2.5/forecast`\n  }\n\n  return `${baseUrl}?q=${components.join(',')}&units=metric&appid=${process.env.OPENWEATHERMAP_API_KEY}`\n}\n\n\nexport function collectForecastResults(forecastResults, maxDays = 4) {\n  const { list } = forecastResults\n\n  let date = new Date() /* Date we'll use to iterate through the forecast results with */\n\n  date.setHours(0, 0, 0, 0)\n\n  let results = []\n\n  for (let item of list) {\n    const match = /^(\\d+)-(\\d+)-(\\d+)/.exec(item.dt_txt)\n\n    if (match === null) {\n      throw Error(`Error parsing forecast datetime: ${item.dt_txt} could not be parsed with RegExp.`)\n    }\n\n    const itemYear = Number(match[1]),\n          itemMonth = Number(match[2]),\n          itemDay = Number(match[3]),\n          itemDate = new Date(itemYear, itemMonth - 1, itemDay)\n\n    itemDate.setHours(0, 0, 0, 0)\n    console.log(itemYear, itemMonth, itemDay)\n\n    if (itemDate.getTime() <= date.getTime()) {\n      continue\n    }\n\n    date = itemDate\n\n    results.push(item)\n\n    if (results.length === maxDays) {\n      break\n    }\n  }\n\n  return results\n}\n\nexport function weatherType(weatherResult) {\n  switch (weatherResult.weather[0].main) {\n    case 'Rain':\n    case 'Snow':\n    case 'Thunderstorm':\n      return weatherResult.weather[0].main\n  }\n\n  if (weatherResult.clouds.all >= 50) {\n    return 'Cloudy'\n  } else if (weatherResult.clouds.all >= 20) {\n    return 'Partially Cloudy'\n  }\n\n  return ''\n}\n\nexport function snakeCase(str) {\n  return str.toLowerCase().replace(/\\s/g, '_')\n}\n","/Users/andrew/weather-app/weather-app/src/components/WeatherIndicatorComponent.jsx",[],"/Users/andrew/weather-app/weather-app/src/App.jsx",[],"/Users/andrew/weather-app/weather-app/src/components/WeatherIconComponent.jsx",["43"],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":1,"column":1,"nodeType":"50","endLine":16,"endColumn":2},{"ruleId":"51","severity":1,"message":"52","line":39,"column":9,"nodeType":"53","endLine":39,"endColumn":90},{"ruleId":"54","severity":1,"message":"55","line":68,"column":3,"nodeType":"56","messageId":"57","endLine":73,"endColumn":4},{"ruleId":"58","severity":1,"message":"59","line":42,"column":9,"nodeType":"53","endLine":42,"endColumn":50},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]